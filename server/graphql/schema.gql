scalar UUID
scalar JSON
scalar Date
scalar Void

schema {
  query: Query
  mutation: Mutation
}

type GenericResponse {
  success: Boolean
}

type Mutation {
  createUser(input: UserInput!): User
  updateUser(id: String!, input: UserInput!): User
  deleteUser(id: String!): GenericResponse
  createPoll(input: PollInput!): Poll
  updatePoll(id: UUID!, question: String!): Poll
  deletePoll(id: UUID!): GenericResponse
  createPollOption(pollId: UUID!, option: String!): PollOption
  updatePollOption(id: UUID!, option: String!): PollOption
  deletePollOption(id: UUID!): GenericResponse
  vote(id: UUID!, input: PollOptionInput!) : PollOption
}

input PollInput {
  userId: String!
  question: String!
  options: String!
}

input UserInput {
  name: String!
  displayName: String!
  email: String!
}

input PollOptionInput {
  pollId: UUID!
  option: String!
}

type Poll {
  id: UUID!
  userId: UUID!
  question: String!
  createdAt: Date!
  updatedAt: Date!
  deletedAt: Date!
  pollOptions(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [PollOption]
  user: User
}

type PollOption {
  id: UUID!
  pollId: UUID!
  option: String!,
  votes: Int!
  createdAt: Date!
  updatedAt: Date!
  deletedAt: Date!
  poll: Poll
}

type Query {
  users(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [User]
  user(
    id: UUID
    where: JSON
  ): User
  polls(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [Poll]
  poll(
    id: UUID
    where: JSON
  ): Poll
  pollOptions(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [PollOption]
  pollOption(
    id: UUID
    where: JSON
  ): PollOption
}

type User {
  id: String!
  displayName: String!
  name: String!
  email: String!
  createdAt: Date!
  updatedAt: Date!
  deletedAt: Date!
  polls(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [Poll]
}